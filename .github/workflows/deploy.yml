# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Deploy to Amazon AWS

on:
  workflow_dispatch:
  push:
    branches: ["main"]

env:
  AWS_REGION: us-east-1
  DOCKER_IMAGE_NAME: m324/nginx

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: aws

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Expose AWS Credential as ENV Vars
        id: expose-aws-env
        env:
          AWS_CREDENTIALS: ${{ secrets.AWS_CREDENTIALS }}
        run: |
          printf "$AWS_CREDENTIALS\n" |
          while IFS=' = ' read key value
          do
              if [[ $key == \[*] ]]; then
                  section=$key
              elif [[ $value ]] && [[ $section == '[default]' ]]; then
                  if [[ $key == 'aws_access_key_id' ]]; then
                      echo "aws-access-key-id=$value" >> $GITHUB_OUTPUT
                  elif [[ $key == 'aws_secret_access_key' ]]; then
                      echo "aws-secret-access-key=$value" >> $GITHUB_OUTPUT
                  elif [[ $key == 'aws_session_token' ]]; then
                      echo "aws-session-token=$value" >> $GITHUB_OUTPUT
                  fi
              fi
          done

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ steps.expose-aws-env.outputs.aws-access-key-id }}
          aws-secret-access-key: ${{ steps.expose-aws-env.outputs.aws-secret-access-key }}
          aws-session-token: ${{ steps.expose-aws-env.outputs.aws-session-token }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}

      - name: Get Server Ip
        id: get-server-ip
        working-directory: terraform
        shell: bash
        run: |
          echo "SERVER_IP=$(sh scripts/get_public_ip.sh ubuntu2404)" >> $GITHUB_ENV

      - name: Set up Ruby for Kamal
        uses: ruby/setup-ruby@v1
        env:
          BUNDLE_GEMFILE: ./kamal/Gemfile
        with:
          ruby-version: 3.4.2
          bundler-cache: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push environment variables
        working-directory: kamal
        env:
          KAMAL_SERVER_IP: ${{ env.SERVER_IP }}
          KAMAL_REGISTRY: "not-used-to-push-envs"
          KAMAL_REGISTRY_PASSWORD: "not-used-to-push-envs"
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          to_envs() { jq -r "( . // {} ) | to_entries[] | \"\(.key)<<$EOF\n\(.value)\n$EOF\n\""; }
          echo "$VARS_CONTEXT" | to_envs >> $GITHUB_ENV
          echo "$SECRETS_CONTEXT" | to_envs >> $GITHUB_ENV
          bundle exec kamal env push

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: type=sha

      - name: Build and push nginx Image
        uses: docker/build-push-action@v6
        with:
          context: ./nginx
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Kamal deploy image
        working-directory: kamal
        env:
          KAMAL_SERVER_IP: ${{ env.SERVER_IP }}
          KAMAL_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          KAMAL_REGISTRY_PASSWORD: ${{ steps.login-ecr.outputs[format('docker_password_{0}_dkr_ecr_us_east_1_amazonaws_com', secrets.AWS_ACCOUNT_ID)] }}
          VERSION: ${{ steps.meta.outputs.version }}
        run: |
          bundle exec kamal deploy --skip-push --version=$VERSION
          echo "Visit me on [http://$KAMAL_SERVER_IP](http://$KAMAL_SERVER_IP) ðŸš€" >> $GITHUB_STEP_SUMMARY
